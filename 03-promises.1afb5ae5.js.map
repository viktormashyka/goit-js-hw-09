{"mappings":"YAgDoE,IAA9DA,EAASC,SAASC,cAAc,SAGhCC,GADWF,SAASC,cAAc,UACxBD,SAASC,cAAc,wBACjCE,EAASH,SAASC,cAAc,sBAChCG,EAAWJ,SAASC,cAAc,wBAyCxC,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,YAEpBA,MAhDPR,EAAOgB,iBAAiB,UAExB,SAAyBC,GACvBA,EAAMC,iBAGN,IAAIC,GAAYhB,EAAQiB,MACpBC,GAAWjB,EAAOgB,MAClBE,GAAajB,EAASe,MAc1B,GAJAG,QAAQC,IAAI,cAAeL,GAC3BI,QAAQC,IAAI,aAAcH,GAC1BE,QAAQC,IAAI,eAAgBF,GAExBA,GAAa,EAEb,YADFC,QAAQC,IAAK,oCAIf,IAAK,IAAIC,EAAI,EAAGA,GAAKH,EAAWG,GAAK,EACnCnB,EAAcmB,EAAGN,GACdO,MAAK,SAAAC,G,IAAGpB,EAAQoB,EAARpB,SAAUC,EAAKmB,EAALnB,MACjBe,QAAQC,IAAI,uBAAwCI,OAAfrB,EAAS,QAAYqB,OAANpB,EAAM,UAE3DqB,OAAM,SAAAF,G,IAAGpB,EAAQoB,EAARpB,SAAUC,EAAKmB,EAALnB,MAClBe,QAAQC,IAAI,sBAAqCI,OAAfrB,EAAS,QAAYqB,OAANpB,EAAM,UAE3DW,GAAYE,K","sources":["src/js/03-promises.js"],"sourcesContent":["// Завдання 3 - генератор промісів\n// Виконуй це завдання у файлах 03-promises.html і 03-promises.js. Подивися демо-відео роботи генератора промісів.\n\n// HTML містить розмітку форми, в поля якої користувач буде вводити першу затримку в мілісекундах, крок збільшення затримки для кожного промісу після першого і кількість промісів, яку необхідно створити.\n\n// <form class=\"form\">\n//   <label>\n//     First delay (ms)\n//     <input type=\"number\" name=\"delay\" required />\n//   </label>\n//   <label>\n//     Delay step (ms)\n//     <input type=\"number\" name=\"step\" required />\n//   </label>\n//   <label>\n//     Amount\n//     <input type=\"number\" name=\"amount\" required />\n//   </label>\n//   <button type=\"submit\">Create promises</button>\n// </form>\n\n// Напиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay) стільки разів, скільки ввели в поле amount. Під час кожного виклику передай їй номер промісу (position), що створюється, і затримку, враховуючи першу затримку (delay), введену користувачем, і крок (step).\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     // Fulfill\n//   } else {\n//     // Reject\n//   }\n// }\n\n// Доповни код функції createPromise таким чином, щоб вона повертала один проміс, який виконується або відхиляється через delay часу. Значенням промісу повинен бути об'єкт, в якому будуть властивості position і delay зі значеннями однойменних параметрів. Використовуй початковий код функції для вибору того, що потрібно зробити з промісом - виконати або відхилити.\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\n// Бібліотека повідомлень\n// УВАГА\n// Наступний функціонал не обов'язковий для здавання завдання, але буде хорошою додатковою практикою.\n\n// Для відображення повідомлень користувачеві, замість console.log(), використовуй бібліотеку notiflix.\n\nconst formEl = document.querySelector('.form');\n// console.log(formRef);\nconst buttonEl = document.querySelector('button');\nconst delayEl = document.querySelector('input[name = delay]');\nconst stepEl = document.querySelector('input[name = step]');\nconst amountEl = document.querySelector('input[name = amount]');\n\nformEl.addEventListener('submit', onSubmitHandler);\n\nfunction onSubmitHandler(event) {\n  event.preventDefault();\n  // const { delay, step, amount } = event.currentTarget;\n\n  let delayNum = +delayEl.value;\n  let stepNum = +stepEl.value;\n  let amountNum = +amountEl.value;\n\n  // const dataForm = new FormData(formRef);\n  // console.log(dataForm.entries());\n  // const finalData = {};\n  // for (const [key, value] of dataForm.entries()) {\n  //   finalData[key] = Number[value];\n  // }\n  // formRef.reset();\n\n  console.log('delay.value', delayNum);\n  console.log('step value', stepNum);\n  console.log('amount value', amountNum);\n\n  if (amountNum <= 0) {\n    console.log(`❌ Bad amount. Try amount under 0`);\n    return;\n  }\n\n  for (let i = 1; i <= amountNum; i += 1) {\n    createPromise(i, delayNum)\n      .then(({ position, delay }) => {\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    delayNum += stepNum;\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n// event.currentTarget.reset();\n// const { delay, step, amount } = event.currentTarget;\n"],"names":["$ce04d3a99e08e73b$var$formEl","document","querySelector","$ce04d3a99e08e73b$var$delayEl","$ce04d3a99e08e73b$var$stepEl","$ce04d3a99e08e73b$var$amountEl","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","delayNum","value","stepNum","amountNum","console","log","i","then","param","concat","catch"],"version":3,"file":"03-promises.1afb5ae5.js.map"}