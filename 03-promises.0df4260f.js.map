{"mappings":"iiBAeA,IAAAA,EAAAC,EAAA,SAEMC,EAASC,SAASC,cAAc,SAGhCC,GADWF,SAASC,cAAc,UACxBD,SAASC,cAAc,wBACjCE,EAASH,SAASC,cAAc,sBAChCG,EAAWJ,SAASC,cAAc,wBAgDxC,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,YAEpBA,MAvDPR,EAAOgB,iBAAiB,UAExB,SAAyBC,GACvBA,EAAMC,iBAGN,IAAIC,EAAWC,OAAOjB,EAAQkB,OAC1BC,EAAUF,OAAOhB,EAAOiB,OACxBE,EAAYH,OAAOf,EAASgB,OAchC,GAJAG,QAAQC,IAAI,cAAeN,GAC3BK,QAAQC,IAAI,aAAcH,GAC1BE,QAAQC,IAAI,eAAgBF,GAExBA,GAAa,EAGb,OAFFC,QAAQC,IAAK,yCACbC,EAAA5B,GAAS6B,OAAOC,KAAK,oCAIvB,IAAK,IAAIC,EAAI,EAAGA,GAAKN,EAAWM,GAAK,EACnCvB,EAAcuB,EAAGV,GACdW,MAAK,SAAAC,G,IAAGxB,EAAQwB,EAARxB,SAAUC,EAAKuB,EAALvB,MACjBgB,QAAQC,IAAI,uBAAwCO,OAAfzB,EAAS,QAAYyB,OAANxB,EAAM,OAC1DkB,EAAA5B,GAAS6B,OAAOM,QACd,uBAAwCD,OAAfzB,EAAS,QAAYyB,OAANxB,EAAM,UAGjD0B,OAAM,SAAAH,G,IAAGxB,EAAQwB,EAARxB,SAAUC,EAAKuB,EAALvB,MAClBgB,QAAQC,IAAI,sBAAuCO,OAAfzB,EAAS,QAAYyB,OAANxB,EAAM,OACzDkB,EAAA5B,GAAS6B,OAAOQ,QACd,sBAAqCH,OAAfzB,EAAS,QAAYyB,OAANxB,EAAM,UAGjDW,GAAYG,K","sources":["src/js/03-promises.js"],"sourcesContent":["// Завдання 3 - генератор промісів\n// Виконуй це завдання у файлах 03-promises.html і 03-promises.js. Подивися демо-відео роботи генератора промісів.\n\n// HTML містить розмітку форми, в поля якої користувач буде вводити першу затримку в мілісекундах, крок збільшення затримки для кожного промісу після першого і кількість промісів, яку необхідно створити.\n\n// Напиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay) стільки разів, скільки ввели в поле amount. Під час кожного виклику передай їй номер промісу (position), що створюється, і затримку, враховуючи першу затримку (delay), введену користувачем, і крок (step).\n\n// Доповни код функції createPromise таким чином, щоб вона повертала один проміс, який виконується або відхиляється через delay часу. Значенням промісу повинен бути об'єкт, в якому будуть властивості position і delay зі значеннями однойменних параметрів. Використовуй початковий код функції для вибору того, що потрібно зробити з промісом - виконати або відхилити.\n\n// Бібліотека повідомлень\n// УВАГА\n// Наступний функціонал не обов'язковий для здавання завдання, але буде хорошою додатковою практикою.\n\n// Для відображення повідомлень користувачеві, замість console.log(), використовуй бібліотеку notiflix.\n\nimport Notiflix from 'notiflix';\n\nconst formEl = document.querySelector('.form');\n// console.log(formRef);\nconst buttonEl = document.querySelector('button');\nconst delayEl = document.querySelector('input[name = delay]');\nconst stepEl = document.querySelector('input[name = step]');\nconst amountEl = document.querySelector('input[name = amount]');\n\nformEl.addEventListener('submit', onSubmitHandler);\n\nfunction onSubmitHandler(event) {\n  event.preventDefault();\n  // const { delay, step, amount } = event.currentTarget;\n\n  let delayNum = Number(delayEl.value);\n  let stepNum = Number(stepEl.value);\n  let amountNum = Number(amountEl.value);\n\n  // const dataForm = new FormData(formRef);\n  // console.log(dataForm.entries());\n  // const finalData = {};\n  // for (const [key, value] of dataForm.entries()) {\n  //   finalData[key] = Number[value];\n  // }\n  // formRef.reset();\n\n  console.log('delay.value', delayNum);\n  console.log('step value', stepNum);\n  console.log('amount value', amountNum);\n\n  if (amountNum <= 0) {\n    console.log(`❌ Bad amount. Try amount under 0`);\n    Notiflix.Notify.info('❌ Bad amount. Try amount under 0');\n    return;\n  }\n\n  for (let i = 1; i <= amountNum; i += 1) {\n    createPromise(i, delayNum)\n      .then(({ position, delay }) => {\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    delayNum += stepNum;\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n// event.currentTarget.reset();\n// const { delay, step, amount } = event.currentTarget;\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$formEl","document","querySelector","$ce04d3a99e08e73b$var$delayEl","$ce04d3a99e08e73b$var$stepEl","$ce04d3a99e08e73b$var$amountEl","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","delayNum","Number","value","stepNum","amountNum","console","log","$parcel$interopDefault","Notify","info","i","then","param","concat","success","catch","failure"],"version":3,"file":"03-promises.0df4260f.js.map"}